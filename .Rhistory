distinct(county)
# Check for missing implementing partners
eie %>% filter(is.na(implementing_partner))
# Check for duplicated or mispelled implementing partners
eie %>% count(implementing_partner)
eie %>% count(month) %>%
# Converts month names into integers that are properly levelled
# Not doing this results in April starting the list, followed by August
mutate(month = match(month, month.name)) %>%
arrange(month)
# Misreported beneficiaries
eie %>% filter(str_detect(indicator, "1") & men > 0)
# Write
eie %>%
# Correcting activity_status for completed projects
mutate(activity_status = ifelse(activity_status == "Ongoing" &
end_date <= "2023-11-01",
"Completed",
activity_status)) %>%
# Changing the lead organisation for rows which listed UNICEF as the donor
mutate(lead_organisation = ifelse(str_detect(donor, "UNCIEF|unicef"),
"UNICEF",
lead_organisation)) %>%
write_csv("./data/eie_5ws.csv")
partners_raw  <- read_csv("./data/partner_names_raw.csv") %>%
clean_names() %>%
distinct(partner_type, agency_name, acronym) %>%
mutate_at(vars(agency_name, acronym), ~ str_trim(str_squish(.))) %>%
filter(agency_name %out% c("National Council for Nomadic Education Kenya",
"National Council of Nomadic Education in Kenya",
"MINISTRY OF EDUCATION",
"ChildFund",
"Childfund",
"CISP Kenya",
"Comitato Internazionale per lo Sviluppo dei Popoli (International Committee for the Development of Peoples) - CISP Kenya.",
"Jesuits Refugee Service",
"Save the Children International",
"AVSI FAOUNDATION",
"ChildFund kenya",
"Kenya RedCross Society",
"FINN CHURCH AID",
"Concern worldwide",
"Dignitas Limited",
"AVSI FOUDNATION")) %>%
mutate(agency_name = recode(agency_name,
"Action for sustainable change" = "Action for Sustainable Change",
"AVSI FOUNDATION" = "AVSI Foundation",
"QATAR CHARITY" = "Qatar Charity",
"Life Skills Promoters" = "Lifeskills Promoters",
"Girl Child Network" = "The Girl Child Network",
"WE WORLD" = "We World",
"KENYA NATIONAL COMMISSION FOR UNESCO" = "UNESCO",
"Kenya National Commission for UNESCO" = "UNESCO")) %>%
mutate(acronym = case_when(agency_name == "Christian Blind Mission"~ "CBM",
agency_name == "Concern Worldwide" ~ "CW",
agency_name == "Finn Church Aid" ~ "FCA",
agency_name == "Mondo" ~ "Mondo",
agency_name == "Plan International Kenya" ~ "PLAN",
agency_name == "Rotary International" ~ "RI",
agency_name == "World Vision Kenya" ~ "WVK",
agency_name == "FilmAid Kenya" ~ "FA",
agency_name == "ResQ247" ~ "ResQ",
agency_name == "LEGO Foundation" ~ "LEGO",
agency_name == "St Paul's university" ~ "SPU",
agency_name == "Dignitas" ~ "DIGN",
agency_name == "EducAid" ~ "EducAid",
agency_name == "Humanity & Inclusion" ~ "H&I",
agency_name == "Build Africa Kenya" ~ "BAK",
agency_name == "Edukans Kenya" ~ "Edukans",
agency_name == "Action for Sustainable Change" ~ "AFOSC",
agency_name == "Elimu Yetu Coalition" ~ "EYC",
agency_name == "CRESNET CBO" ~ "CRES",
agency_name == "MOE Wajir" ~ "MOE Wajir",
agency_name == "Qatar Charity" ~ "QATAR",
agency_name == "Education Management & Leadership" ~ "EML",
agency_name == "International Aid Services Kenya" ~ "IASK",
agency_name == "Worldreader" ~ "WR",
agency_name == "ChildFund Kenya" ~ "CF",
agency_name == "The Girl Child Network" ~ "GCN",
agency_name == "KENYA NATIONAL COMMISSION FOR UNESCO" ~ "UNESCO",
agency_name == "Kenya National Commission for UNESCO" ~ "UNESCO",
agency_name == "UNESCO" ~ "UNESCO",
TRUE ~ acronym)) %>%
distinct(partner_type, partner = agency_name, acronym) %>%
arrange(partner)
eie %>%
rename(monitoring_indicator = indicator,
main_activity = activity) %>%
# filter(month %in% c("July", "August", "September")) %>%
write_csv(paste0("./data/eie_5ws_ocha_",
format(Sys.time(), '%Y%m%d'),
".csv"))
eie %>%
# filter(month %in% c("July", "August", "September")) %>%
group_by(month, indicator, county, adm1_pcode) %>%
summarise(reached = sum(total_reached, na.rm = TRUE),
sector_reached = sum(sector_reached, na.rm = TRUE),
.groups = "drop") %>%
write_csv(paste0("./data/ocha_reached_by_indicator_",
format(Sys.time(), '%Y%m%d'),
".csv"))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(anytime)
library(tidytext)
library(ggsflabel)
theme_set(theme_light())
# Installation of mdepriv package
# install package devtools if not yet installed
#   install.packages("devtools")
# install fast from GitHub without vignettes
#   devtools::install_github("a-benini/mdepriv", build_vignettes = FALSE
# Alternatively, follow the instructions here: https://a-benini.github.io/mdepriv/
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Fixing dates
name_to_date <- function(x) {
lubridate::mdy(ifelse(x %in% c(month.name, month.abb), paste0(x, "/01/2023"), x))
}
sum_stats <- eie %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(county),
reached = sum(sector_reached, na.rm = TRUE),
men = sum(men[str_detect(indicator_short, "2|5") &
activity_status == "Completed"], na.rm = TRUE),
women = sum(women[str_detect(indicator_short, "2|5") &
activity_status == "Completed"], na.rm = TRUE),
boys = sum(boys[str_detect(indicator_short, "1|2|6") &
activity_status == "Completed"], na.rm = TRUE),
girls = sum(girls[str_detect(indicator_short, "1|2|6") &
activity_status == "Completed"], na.rm = TRUE),
reached_1256 = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
latest_reached = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"&
month %in% params$report_month],
na.rm = TRUE))
sum_stats
summary_table <- eie %>%
filter(activity_status == "Completed") %>%
mutate(latest_reached = ifelse(month %in% params$report_month, total_reached, NA_integer_)) %>%
group_by(indicator_short) %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(adm1_pcode),
latest_reached = sum(latest_reached, na.rm = TRUE),
total_reached = sum(total_reached, na.rm = TRUE)) %>%
adorn_totals("row",,,, latest_reached, total_reached) %>%
mutate(partners = ifelse(indicator_short == "Total", sum_stats$partners, partners),
counties = ifelse(indicator_short == "Total", sum_stats$counties, counties),
total_reached = ifelse(indicator_short == "Total",
sum_stats$reached_1256,
total_reached),
latest_reached = ifelse(indicator_short == "Total",
sum_stats$latest_reached,
latest_reached)) %>%
left_join(targets %>%
filter(target_unit == "people") %>%
group_by(indicator_short) %>%
summarise(target = sum(county_target)),
by = "indicator_short") %>%
filter(!is.na(indicator_short)) %>%
mutate(target = ifelse(indicator_short == "Total",
targets %>% distinct(county, county_overall_target) %>% {sum(.$county_overall_target)},
target),
target = ifelse(is.na(target), 0, target)) %>%
mutate(pc = round(total_reached / target * 100, digits = 2),
pc = ifelse(is.infinite(pc), 100, pc)) %>%
select(indicator = indicator_short, partners, counties,
latest_reached, total_reached, target, `%target_reached` = pc) %>%
select_all(~ gsub("latest",
params$report_month, .)) %>%
select_all(~ str_to_title(.))
# Run this if you need to
# rmarkdown::render(input = "5Ws_cleaning_script.Rmd")
locations <- read_xlsx("./data/ken_adminboundaries_tabulardata.xlsx",
sheet = "ADM2") %>%
clean_names()
sitrep_table <- read_xlsx("./data/sitrep_results_table.xlsx") %>%
clean_names()
targets <- read_csv("./data/eie_targets.csv")
pcode1_shape <-
sf::st_read("./data/ken_adm_iebc_20191031_shp/ken_admbnda_adm1_iebc_20191031.shp",
quiet = TRUE) %>%
clean_names()
ipc <- read_csv("./data/ipc.csv")
partner_list_counties <- read_csv("./data/partner_list_counties.csv") %>%
filter(partner_type == "implementing_partner")
eie <- read_csv("./data/eie_5ws.csv") %>%
# filter(!is.na(indicator_short)) %>%
replace_na(list(boys = 0, girls = 0, men = 0, women = 0)) %>%
# Total reached of indicator 1 is only boys and girls
mutate(total_reached = case_when(
str_detect(indicator, "children and youth accessing ECD spaces/schools in drought affected areas") ~
boys + girls,
str_detect(indicator, "5 #|5.1|5.2|5.3") ~ men + women,
str_detect(indicator, "children and youth benefiting from resilience enhancing programmes") ~ boys + girls,
TRUE ~ total_reached)) %>%
mutate(lead_organisation = ifelse(is.na(lead_organisation),
implementing_partner,
lead_organisation))
sum_stats <- eie %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(county),
reached = sum(sector_reached, na.rm = TRUE),
men = sum(men[str_detect(indicator_short, "2|5") &
activity_status == "Completed"], na.rm = TRUE),
women = sum(women[str_detect(indicator_short, "2|5") &
activity_status == "Completed"], na.rm = TRUE),
boys = sum(boys[str_detect(indicator_short, "1|2|6") &
activity_status == "Completed"], na.rm = TRUE),
girls = sum(girls[str_detect(indicator_short, "1|2|6") &
activity_status == "Completed"], na.rm = TRUE),
reached_1256 = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
latest_reached = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"&
month %in% params$report_month],
na.rm = TRUE))
summary_table <- eie %>%
filter(activity_status == "Completed") %>%
mutate(latest_reached = ifelse(month %in% params$report_month, total_reached, NA_integer_)) %>%
group_by(indicator_short) %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(adm1_pcode),
latest_reached = sum(latest_reached, na.rm = TRUE),
total_reached = sum(total_reached, na.rm = TRUE)) %>%
adorn_totals("row",,,, latest_reached, total_reached) %>%
mutate(partners = ifelse(indicator_short == "Total", sum_stats$partners, partners),
counties = ifelse(indicator_short == "Total", sum_stats$counties, counties),
total_reached = ifelse(indicator_short == "Total",
sum_stats$reached_1256,
total_reached),
latest_reached = ifelse(indicator_short == "Total",
sum_stats$latest_reached,
latest_reached)) %>%
left_join(targets %>%
filter(target_unit == "people") %>%
group_by(indicator_short) %>%
summarise(target = sum(county_target)),
by = "indicator_short") %>%
filter(!is.na(indicator_short)) %>%
mutate(target = ifelse(indicator_short == "Total",
targets %>% distinct(county, county_overall_target) %>% {sum(.$county_overall_target)},
target),
target = ifelse(is.na(target), 0, target)) %>%
mutate(pc = round(total_reached / target * 100, digits = 2),
pc = ifelse(is.infinite(pc), 100, pc)) %>%
select(indicator = indicator_short, partners, counties,
latest_reached, total_reached, target, `%target_reached` = pc) %>%
select_all(~ gsub("latest",
params$report_month, .)) %>%
select_all(~ str_to_title(.))
summary_table %>%
flextable() %>%
theme_zebra() %>%
set_caption(paste0("Summary statistics for EIE 5Ws reporting, ", params$report_date)) %>%
set_table_properties(layout = "autofit", width = .99) %>%
fontsize(i = 1:7, j = 1, size = 9) %>%
fontsize(size = 9, part = "header") %>%
footnote(i = 1, j = 2, part = "header", ref_symbols = "1",
as_paragraph("Only implementing partners")) %>%
footnote(i = 8, j = 5:6, ref_symbols = "2",
as_paragraph("Only the sum of indicators 1, 2, 5 and 6"))
eie %>%
filter(activity_status == "Completed") %>%
mutate(latest_reached = ifelse(month %in% params$report_month, total_reached, NA_integer_)) %>%
group_by(indicator_short) %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(adm1_pcode),
latest_reached = sum(latest_reached, na.rm = TRUE),
total_reached = sum(total_reached, na.rm = TRUE)) %>%
adorn_totals("row",,,, latest_reached, total_reached)
summary_table %>%
flextable() %>%
theme_zebra() %>%
set_caption(paste0("Summary statistics for EIE 5Ws reporting, ", params$report_date)) %>%
set_table_properties(layout = "autofit", width = .99) %>%
fontsize(i = 1:7, j = 1, size = 9) %>%
fontsize(size = 9, part = "header") %>%
footnote(i = 1, j = 2, part = "header", ref_symbols = "1",
as_paragraph("Only implementing partners")) %>%
footnote(i = 8, j = 4:5, ref_symbols = "2",
as_paragraph("Only the sum of indicators 1, 2, 5 and 6"))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# Installation of mdepriv package
# install package devtools if not yet installed
#   install.packages("devtools")
# install fast from GitHub without vignettes
#   devtools::install_github("a-benini/mdepriv", build_vignettes = FALSE
# Alternatively, follow the instructions here: https://a-benini.github.io/mdepriv/
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Fixing dates
name_to_date <- function(x) {
lubridate::mdy(ifelse(x %in% c(month.name, month.abb), paste0(x, "/01/2023"), x))
}
# Recode last item
# Doesn't work well
recode_last_item <- function(input_vector) {
# Create a copy of the input vector
updated_vector <- input_vector
new_value <- paste0("and ", updated_vector[length(updated_vector)])
# Recode the last item
updated_vector[length(updated_vector)] <- new_value
# Return the updated vector
return(updated_vector)
}
summarise_indicator <- function(tbl) {
tbl %>%
summarise(girls = sum(girls, na.rm = TRUE),
boys = sum(boys, na.rm = TRUE),
men = sum(men, na.rm = TRUE),
women = sum(women, na.rm = TRUE),
counties = n_distinct(adm1_pcode)) %>%
mutate_at(vars(girls, boys, men, women), ~ replace_na(., 0)) %>%
mutate(total = girls + boys + men + women)
}
list_counties <- function(tbl) {
tbl %>%
distinct(county) %>% summarise(
counties = paste(county, collapse = ", ")) %>%
pull(counties)
}
eie %>% glimpse()
eie %>% count(indicator_short, indicator)
eie %>% count(indicator_short)
sitrep_table_new <- eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3") &
!str_detect(indicator, "5")) %>%
mutate(total = boys + girls) %>%
pivot_longer(cols = c(boys, girls, total),
names_to = "sex_modifier",
values_to = "beneficiaries") %>%
mutate(sex_modifier = str_to_title(sex_modifier),
sex_modifier = fct_relevel(sex_modifier,
c("Total", "Girls", "Boys"))) %>%
group_by(indicator_short, sex_modifier) %>%
summarise(unicef_previous_results = sum(beneficiaries[month %in% previous_months & group == "unicef"],
na.rm = TRUE),
unicef_total_results = sum(beneficiaries[group == "unicef"],
na.rm = TRUE),
sector_previous_results = sum(beneficiaries[month %in% previous_months], na.rm = TRUE),
sector_total_results = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
mutate(indicator_match = ifelse(indicator_short == "1. Access ECD spaces/schools",
"Access to education",
"Learning materials"),
match = paste0(indicator_match, sex_modifier)) %>%
left_join(sitrep_table %>%
mutate(indicator_match = ifelse(str_detect(indicator_match, "education"),
"Access to education",
"Learning materials"),
sex_modifier = case_when(
str_detect(sex_modifier, "Total") ~ "Total",
str_detect(sex_modifier, "Girls") ~ "Girls",
str_detect(sex_modifier, "Boys") ~ "Boys")) %>%
# You can remove this later, since you've figured out the error
mutate(match = paste0(indicator_match, sex_modifier)) %>%
mutate_at(vars(needs, unicef_target, sector_target),
~ parse_number(.)) %>%
select(match, needs, unicef_target, sector_target),
by = c("match")) %>%
mutate(unicef_progress_rate = round(unicef_total_results / unicef_target * 100, digits = 2),
sector_progress_rate = round(sector_total_results / sector_target * 100, digits = 2)) %>%
select(indicator = indicator_match, sex_modifier, needs,
unicef_target, unicef_total_results, unicef_previous_results, unicef_progress_rate,
sector_target, sector_total_results, sector_previous_results, sector_progress_rate)
locations <- read_xlsx("./data/ken_adminboundaries_tabulardata.xlsx",
sheet = "ADM2") %>%
clean_names()
eie <- read_csv("./data/eie_5ws.csv")
report_date <- "31 December 2023"
previous_months <- c("January", "February", "March", "April", "May",
"July", "August", "September", "October", "November")
report_month <- "December"
sitrep_table <- read_xlsx("./data/sitrep_results_table.xlsx") %>%
setNames(c(
"indicator",
"indicator_match",
"sex_modifier",
"needs",
"unicef_target",
"unicef_total_results",
"unicef_previous_results",
"unicef_progress_rate",
"sector_target",
"sector_total_results",
"sector_previous_results",
"sector_progress_rate"
))
# Check the file name
# combined <- read_csv("./data/combined20230904.csv")
sitrep_table_new <- eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3") &
!str_detect(indicator, "5")) %>%
mutate(total = boys + girls) %>%
pivot_longer(cols = c(boys, girls, total),
names_to = "sex_modifier",
values_to = "beneficiaries") %>%
mutate(sex_modifier = str_to_title(sex_modifier),
sex_modifier = fct_relevel(sex_modifier,
c("Total", "Girls", "Boys"))) %>%
group_by(indicator_short, sex_modifier) %>%
summarise(unicef_previous_results = sum(beneficiaries[month %in% previous_months & group == "unicef"],
na.rm = TRUE),
unicef_total_results = sum(beneficiaries[group == "unicef"],
na.rm = TRUE),
sector_previous_results = sum(beneficiaries[month %in% previous_months], na.rm = TRUE),
sector_total_results = sum(beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
mutate(indicator_match = ifelse(indicator_short == "1. Access ECD spaces/schools",
"Access to education",
"Learning materials"),
match = paste0(indicator_match, sex_modifier)) %>%
left_join(sitrep_table %>%
mutate(indicator_match = ifelse(str_detect(indicator_match, "education"),
"Access to education",
"Learning materials"),
sex_modifier = case_when(
str_detect(sex_modifier, "Total") ~ "Total",
str_detect(sex_modifier, "Girls") ~ "Girls",
str_detect(sex_modifier, "Boys") ~ "Boys")) %>%
# You can remove this later, since you've figured out the error
mutate(match = paste0(indicator_match, sex_modifier)) %>%
mutate_at(vars(needs, unicef_target, sector_target),
~ parse_number(.)) %>%
select(match, needs, unicef_target, sector_target),
by = c("match")) %>%
mutate(unicef_progress_rate = round(unicef_total_results / unicef_target * 100, digits = 2),
sector_progress_rate = round(sector_total_results / sector_target * 100, digits = 2)) %>%
select(indicator = indicator_match, sex_modifier, needs,
unicef_target, unicef_total_results, unicef_previous_results, unicef_progress_rate,
sector_target, sector_total_results, sector_previous_results, sector_progress_rate)
sitrep_table_new%>%
flextable() %>%
theme_zebra() %>%
fontsize(part = "header", size = 6) %>%
fontsize(i = 1:6, j = 1:11, size = 7)
