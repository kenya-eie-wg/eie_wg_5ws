group_by(month) %>%
summarise(total_reached = sum(total_reached, na.rm = TRUE)) %>%
mutate(month = fct_relevel(month, c("January", "February", "March",
"April", "May", "June",
"July", "August", "September",
"October", "November", "December"))) %>%
arrange(month) %>%
adorn_totals("row") %>%
write_csv("./data/indicator1_check_only_children.csv")
eie <- read_csv("./data/eie_5ws.csv") %>%
filter(!is.na(indicator_short)) %>%
replace_na(list(boys = 0, girls = 0, men = 0, women = 0)) %>%
# Total reached of indicator 1 is only boys and girls
mutate(total_reached = ifelse(str_detect(indicator, "1"),
boys + girls,
total_reached))
eie %>% filter(str_detect, "2") %>%
filter(activity_status == "Completed") %>%
summarise(men = sum(men),
women = sum(women),
boy = sum(boys),
girls = sum(girls))
eie %>% filter(str_detect(indicator, "2")) %>%
filter(activity_status == "Completed") %>%
summarise(men = sum(men),
women = sum(women),
boy = sum(boys),
girls = sum(girls))
eie %>% filter(str_detect(indicator, "2")) %>%
filter(activity_status == "Completed") %>%
group_by(month) %>%
summarise(men = sum(men),
women = sum(women),
boy = sum(boys),
girls = sum(girls))
eie %>% count(indicator)
sum_stats <- eie %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(county),
reached = sum(sector_reached, na.rm = TRUE),
men = sum(men[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
women = sum(women[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
boys = sum(boys[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
girls = sum(girls[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
reached_1256 = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"], na.rm = TRUE),
latest_reached = sum(total_reached[str_detect(indicator_short, "1|2|5|6") &
activity_status == "Completed"&
month %in% report_month],
na.rm = TRUE))
summary_table <- eie %>%
filter(activity_status == "Completed") %>%
mutate(latest_reached = ifelse(month %in% report_month, total_reached, NA_integer_)) %>%
group_by(indicator_short) %>%
summarise(partners = n_distinct(implementing_partner),
counties = n_distinct(adm1_pcode),
latest_reached = sum(latest_reached, na.rm = TRUE),
total_reached = sum(total_reached, na.rm = TRUE)) %>%
adorn_totals("row",,,, latest_reached, total_reached) %>%
mutate(partners = ifelse(indicator_short == "Total", sum_stats$partners, partners),
counties = ifelse(indicator_short == "Total", sum_stats$counties, counties),
total_reached = ifelse(indicator_short == "Total",
sum_stats$reached_1256,
total_reached),
latest_reached = ifelse(indicator_short == "Total",
sum_stats$latest_reached,
latest_reached)) %>%
left_join(targets %>%
filter(target_unit == "people") %>%
group_by(indicator_short) %>%
summarise(target = sum(county_target)),
by = "indicator_short") %>%
mutate(target = ifelse(indicator_short == "Total",
targets %>% distinct(county, county_overall_target) %>% {sum(.$county_overall_target)},
target)) %>%
mutate(pc = round(total_reached / target * 100, digits = 2)) %>%
select(indicator = indicator_short, partners, counties,
latest_reached, total_reached, target, `%target_reached` = pc) %>%
select_all(~ gsub("latest",
report_month, .)) %>%
select_all(~ str_to_title(.))
summary_table %>%
flextable() %>%
theme_zebra() %>%
set_caption(paste0("Summary statistics for EIE 5Ws reporting, ", report_date)) %>%
set_table_properties(layout = "autofit", width = .99) %>%
fontsize(i = 1:6, j = 1, size = 9) %>%
fontsize(size = 9, part = "header") %>%
footnote(i = 1, j = 2, part = "header", ref_symbols = "1",
as_paragraph("Only implementing partners")) %>%
footnote(i = 7, j = 5:6, ref_symbols = "2",
as_paragraph("Only the sum of indicators 1, 2, 5 and 6"))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(anytime)
library(tidytext)
library(ggsflabel)
theme_set(theme_light())
# Installation of mdepriv package
# install package devtools if not yet installed
#   install.packages("devtools")
# install fast from GitHub without vignettes
#   devtools::install_github("a-benini/mdepriv", build_vignettes = FALSE
# Alternatively, follow the instructions here: https://a-benini.github.io/mdepriv/
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Fixing dates
name_to_date <- function(x) {
lubridate::mdy(ifelse(x %in% c(month.name, month.abb), paste0(x, "/01/2023"), x))
}
locations <- read_xlsx("./data/ken_adminboundaries_tabulardata.xlsx",
sheet = "ADM2") %>%
clean_names()
report_date <- "25 June 2023"
report_month <- "June"
sitrep_table <- read_xlsx("./data/sitrep_results_table.xlsx") %>%
clean_names()
targets <- read_csv("./data/eie_targets.csv")
pcode1_shape <-
sf::st_read("./data/ken_adm_iebc_20191031_shp/ken_admbnda_adm1_iebc_20191031.shp",
quiet = TRUE) %>%
clean_names()
ipc <- read_csv("./data/ipc.csv")
partner_list_counties <- read_csv("./data/partner_list_counties.csv") %>%
filter(partner_type == "implementing_partner")
eie <- read_csv("./data/eie_5ws.csv") %>%
filter(!is.na(indicator_short)) %>%
replace_na(list(boys = 0, girls = 0, men = 0, women = 0)) %>%
# Total reached of indicator 1 is only boys and girls
mutate(total_reached = ifelse(str_detect(indicator, "1"),
boys + girls,
total_reached))
eie %>%
mutate(indicator_short = fct_rev(indicator_short)) %>%
mutate_at(vars(boys, girls, men, women), ~ replace_na(., 0)) %>%
mutate_at(vars(men, women), ~ ifelse(str_detect(indicator, "1"), 0, .)) %>%
group_by(indicator_short) %>%
summarise_at(vars(boys, girls, men, women), ~ sum(., na.rm = TRUE)) %>%
mutate(total_reached = boys + girls + men + women,
female = (women + girls) / total_reached,
male = (boys + men) / total_reached) %>%
pivot_longer(cols = c(female, male),
names_to = "sex",
values_to = "pc") %>%
ggplot(aes(x = pc, y = indicator_short, fill = sex)) +
geom_col() +
geom_text(aes(x = pc,
y = indicator_short,
label = percent(pc, accuracy = 1)),
position = position_stack(vjust = .5),
colour = "white") +
scale_fill_manual(values = c("#443983", "#35b779")) +
scale_x_continuous(labels = percent) +
labs(x = "",
y = "",
title = "Sex breakdown by indicator")
eie %>%
mutate_at(vars(boys, girls, men, women), ~ replace_na(., 0)) %>%
group_by(indicator_short) %>%
summarise_at(vars(men, women, boys, girls), ~ sum(.)) %>%
filter(!is.na(indicator_short)) %>%
pivot_longer(cols = c(men, women, boys, girls),
names_to = "type",
values_to = "reached")
eie %>%
mutate_at(vars(boys, girls, men, women), ~ replace_na(., 0)) %>%
group_by(indicator_short) %>%
summarise_at(vars(men, women, boys, girls), ~ sum(.)) %>%
filter(!is.na(indicator_short)) %>%
pivot_longer(cols = c(men, women, boys, girls),
names_to = "type",
values_to = "reached") %>%
mutate(type = str_to_title(type),
type = fct_relevel(type, c("Men", "Women", "Boys", "Girls"))) %>%
# You're just filtering them out manually
mutate(reached = case_when(
str_detect(indicator_short, "5") & type == "Boys" ~ 0,
str_detect(indicator_short, "5") & type == "Girls" ~ 0,
str_detect(indicator_short, "6") & type == "Men" ~ 0,
str_detect(indicator_short, "6") & type == "Women" ~ 0,
str_detect(indicator_short, "1") & type == "Men" ~ 0,
str_detect(indicator_short, "1") & type == "Women" ~ 0,
TRUE ~ reached
)) %>%
ggplot(aes(y = type, x = reached, fill = type)) +
geom_col() +
geom_text(aes(label = comma(reached)),
hjust = "inward") +
theme(legend.position = "none",
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 12)) +
scale_x_continuous(labels = number_format(scale = 1 / 1000, suffix = "K")) +
scale_fill_viridis_d(begin = .2, end = .9) +
facet_wrap(~ indicator_short, scales = "free_x") +
labs(x = "Persons reached",
y = "",
title = "Reach disaggregated by sex, age and indicator")
79639 + 94207
eie %>%
filter(activity_status == "Completed") %>%
mutate_at(vars(boys, girls, men, women), ~ replace_na(., 0)) %>%
group_by(indicator_short) %>%
summarise_at(vars(men, women, boys, girls), ~ sum(.)) %>%
filter(!is.na(indicator_short)) %>%
pivot_longer(cols = c(men, women, boys, girls),
names_to = "type",
values_to = "reached") %>%
mutate(type = str_to_title(type),
type = fct_relevel(type, c("Men", "Women", "Boys", "Girls"))) %>%
# You're just filtering them out manually
mutate(reached = case_when(
str_detect(indicator_short, "5") & type == "Boys" ~ 0,
str_detect(indicator_short, "5") & type == "Girls" ~ 0,
str_detect(indicator_short, "6") & type == "Men" ~ 0,
str_detect(indicator_short, "6") & type == "Women" ~ 0,
str_detect(indicator_short, "1") & type == "Men" ~ 0,
str_detect(indicator_short, "1") & type == "Women" ~ 0,
TRUE ~ reached
)) %>%
ggplot(aes(y = type, x = reached, fill = type)) +
geom_col() +
geom_text(aes(label = comma(reached)),
hjust = "inward") +
theme(legend.position = "none",
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121"),
plot.title = element_text(size = 12)) +
scale_x_continuous(labels = number_format(scale = 1 / 1000, suffix = "K")) +
scale_fill_viridis_d(begin = .2, end = .9) +
facet_wrap(~ indicator_short, scales = "free_x") +
labs(x = "Persons reached",
y = "",
title = "Reach disaggregated by sex, age and indicator")
62899 + 74913
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# Installation of mdepriv package
# install package devtools if not yet installed
#   install.packages("devtools")
# install fast from GitHub without vignettes
#   devtools::install_github("a-benini/mdepriv", build_vignettes = FALSE
# Alternatively, follow the instructions here: https://a-benini.github.io/mdepriv/
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Fixing dates
name_to_date <- function(x) {
lubridate::mdy(ifelse(x %in% c(month.name, month.abb), paste0(x, "/01/2023"), x))
}
# Recode last item
# Doesn't work well
recode_last_item <- function(input_vector) {
# Create a copy of the input vector
updated_vector <- input_vector
new_value <- paste0("and ", updated_vector[length(updated_vector)])
# Recode the last item
updated_vector[length(updated_vector)] <- new_value
# Return the updated vector
return(updated_vector)
}
summarise_indicator <- function(tbl) {
tbl %>%
summarise(girls = sum(girls, na.rm = TRUE),
boys = sum(boys, na.rm = TRUE),
men = sum(men, na.rm = TRUE),
women = sum(women, na.rm = TRUE),
counties = n_distinct(adm1_pcode)) %>%
mutate_at(vars(girls, boys, men, women), ~ replace_na(., 0)) %>%
mutate(total = girls + boys + men + women)
}
list_counties <- function(tbl) {
tbl %>%
distinct(county) %>% summarise(
counties = paste(county, collapse = ", ")) %>%
pull(counties)
}
locations <- re
eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3")) %>%
mutate(total = boys + girls) %>%
pivot_longer(cols = c(boys, girls, total),
names_to = "sex_modifier",
values_to = "beneficiaries")
locations <- read_xlsx("./data/ken_adminboundaries_tabulardata.xlsx",
sheet = "ADM2") %>%
clean_names()
eie <- read_csv("./data/eie_5ws.csv")
report_date <- "25 June 2023"
previous_months <- c("January", "February", "March", "April", "May")
report_month <- "June"
sitrep_table <- read_xlsx("./data/sitrep_results_table.xlsx") %>%
setNames(c(
"indicator",
"indicator_match",
"sex_modifier",
"needs",
"unicef_target",
"unicef_total_results",
"unicef_previous_results",
"unicef_progress_rate",
"sector_target",
"sector_total_results",
"sector_previous_results",
"sector_progress_rate"
))
combined <- read_csv("./data/combined.csv")
eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3")) %>%
mutate(total = boys + girls) %>%
pivot_longer(cols = c(boys, girls, total),
names_to = "sex_modifier",
values_to = "beneficiaries")
eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3")) %>%
mutate(total = boys + girls) %>%
pivot_longer(cols = c(boys, girls, total),
names_to = "sex_modifier",
values_to = "beneficiaries") %>%
select(boys, girls, total)
eie %>%
filter(activity_status == "Completed") %>%
mutate(group = ifelse(str_detect(lead_organisation, "UNICEF"),
"unicef", "non_unicef")) %>%
filter(str_detect(indicator, "1|3")) %>%
mutate(total = boys + girls)
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(janitor)
library(scales)
library(viridis)
library(patchwork)
library(DT)
library(here)
library(sf)
library(plotly)
library(flextable)
library(ggrepel)
library(anytime)
library(tidytext)
theme_set(theme_light())
# Installation of mdepriv package
# install package devtools if not yet installed
#   install.packages("devtools")
# install fast from GitHub without vignettes
#   devtools::install_github("a-benini/mdepriv", build_vignettes = FALSE
# Alternatively, follow the instructions here: https://a-benini.github.io/mdepriv/
# disabling scientific notation
options(scipen = 100)
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
# mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Fixing dates
name_to_date <- function(x) {
lubridate::mdy(ifelse(x %in% c(month.name, month.abb), paste0(x, "/01/2023"), x))
}
# Recode last item
# Doesn't work well
recode_last_item <- function(input_vector) {
# Create a copy of the input vector
updated_vector <- input_vector
new_value <- paste0("and ", updated_vector[length(updated_vector)])
# Recode the last item
updated_vector[length(updated_vector)] <- new_value
# Return the updated vector
return(updated_vector)
}
summarise_indicator <- function(tbl) {
tbl %>%
summarise(girls = sum(girls, na.rm = TRUE),
boys = sum(boys, na.rm = TRUE),
men = sum(men, na.rm = TRUE),
women = sum(women, na.rm = TRUE),
counties = n_distinct(adm1_pcode)) %>%
mutate_at(vars(girls, boys, men, women), ~ replace_na(., 0)) %>%
mutate(total = girls + boys + men + women)
}
list_counties <- function(tbl) {
tbl %>%
distinct(county) %>% summarise(
counties = paste(county, collapse = ", ")) %>%
pull(counties)
}
locations <- read_xlsx("./data/ken_adminboundaries_tabulardata.xlsx",
sheet = "ADM2") %>%
clean_names()
eie <- read_csv("./data/eie_5ws.csv")
report_date <- "25 June 2023"
previous_months <- c("January", "February", "March", "April", "May")
report_month <- "June"
sitrep_table <- read_xlsx("./data/sitrep_results_table.xlsx") %>%
setNames(c(
"indicator",
"indicator_match",
"sex_modifier",
"needs",
"unicef_target",
"unicef_total_results",
"unicef_previous_results",
"unicef_progress_rate",
"sector_target",
"sector_total_results",
"sector_previous_results",
"sector_progress_rate"
))
combined <- read_csv("./data/combined.csv")
eie %>%
filter(!is.na(men) | !is.na(women)) %>%
filter(str_detect(indicator, "1"))
eie %>%
filter(!is.na(men) | !is.na(women)) %>%
filter(str_detect(indicator, "1")) %>%
sample_n(10) %>%
pull(activity)
